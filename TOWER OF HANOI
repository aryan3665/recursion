
## TOWER OF HANOI - RECURSION EXPLAINED

ðŸ”· PROBLEM STATEMENT:
You have 3 rods (A, B, C) and N disks of different sizes.
Initially, all disks are stacked in decreasing size on rod A (largest at the bottom).
The goal is to move all disks to rod C using rod B, following these rules:

1. Only one disk can be moved at a time.
2. A disk can only be placed on top of a larger disk.
3. Only the topmost disk of any rod can be moved.

ðŸ”· RECURSIVE APPROACH:
To move n disks from A to C using B:

1. Move (n-1) disks from A to B using C.
2. Move 1 disk from A to C.
3. Move (n-1) disks from B to C using A.

ðŸ”· BASE CASE:
If n == 1:

* Just move the disk from source to destination.

ðŸ”· C++ CODE:
#include <iostream>
using namespace std;

// Recursive function for Tower of Hanoi
void towerOfHanoi(int n, char source, char destination, char auxiliary) {
    if (n == 1) {
        cout << "Move disk 1 from " << source << " to " << destination << endl;
        return;
    }

    // Step 1: Move n-1 disks from source to auxiliary
    towerOfHanoi(n - 1, source, auxiliary, destination);

    // Step 2: Move the nth disk from source to destination
    cout << "Move disk " << n << " from " << source << " to " << destination << endl;

    // Step 3: Move the n-1 disks from auxiliary to destination
    towerOfHanoi(n - 1, auxiliary, destination, source);
}

int main() {
    int n;
    cout << "Enter number of disks: ";
    cin >> n;

    cout << "\nSequence of moves:\n";
    towerOfHanoi(n, 'A', 'C', 'B'); // A = source, C = destination, B = auxiliary

    cout << "\nTotal moves: " << (1 << n) - 1 << endl; // 2^n - 1
    return 0;
}


ðŸ”· TIME COMPLEXITY:

* Number of moves: 2^n - 1
* Time Complexity: O(2^n)
* Space Complexity: O(n) (due to recursion stack)

ðŸ”· EXAMPLE OUTPUT FOR n = 3:
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
